// Code generated by goctl. DO NOT EDIT!
// Source: video_rpc.proto

package videorpc

import (
	"context"

	"github.com/lixiandea/go-zero-mall/apps/video/video_rpc/pb/video_rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddVideoRequest     = video_rpc.AddVideoRequest
	AddVideoResponse    = video_rpc.AddVideoResponse
	DeleteVideoRequest  = video_rpc.DeleteVideoRequest
	DeleteVideoResponse = video_rpc.DeleteVideoResponse
	GetVideoRequest     = video_rpc.GetVideoRequest
	GetVideoResponse    = video_rpc.GetVideoResponse
	UpdateVideoRequest  = video_rpc.UpdateVideoRequest
	UpdateVideoResponse = video_rpc.UpdateVideoResponse

	VideoRpc interface {
		UpdateVideo(ctx context.Context, in *UpdateVideoRequest, opts ...grpc.CallOption) (*UpdateVideoResponse, error)
		DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error)
		AddVideo(ctx context.Context, in *AddVideoRequest, opts ...grpc.CallOption) (*AddVideoResponse, error)
		GetVideo(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*GetVideoResponse, error)
	}

	defaultVideoRpc struct {
		cli zrpc.Client
	}
)

func NewVideoRpc(cli zrpc.Client) VideoRpc {
	return &defaultVideoRpc{
		cli: cli,
	}
}

func (m *defaultVideoRpc) UpdateVideo(ctx context.Context, in *UpdateVideoRequest, opts ...grpc.CallOption) (*UpdateVideoResponse, error) {
	client := video_rpc.NewVideoRpcClient(m.cli.Conn())
	return client.UpdateVideo(ctx, in, opts...)
}

func (m *defaultVideoRpc) DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error) {
	client := video_rpc.NewVideoRpcClient(m.cli.Conn())
	return client.DeleteVideo(ctx, in, opts...)
}

func (m *defaultVideoRpc) AddVideo(ctx context.Context, in *AddVideoRequest, opts ...grpc.CallOption) (*AddVideoResponse, error) {
	client := video_rpc.NewVideoRpcClient(m.cli.Conn())
	return client.AddVideo(ctx, in, opts...)
}

func (m *defaultVideoRpc) GetVideo(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*GetVideoResponse, error) {
	client := video_rpc.NewVideoRpcClient(m.cli.Conn())
	return client.GetVideo(ctx, in, opts...)
}
